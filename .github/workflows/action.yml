name: chocolatine
run-name: ${{github.actor}} chocolatine test run
on:
    push:
        branches-ignore:
            - " ga-ignore-*"
    pull_request:
        branches-ignore:
            - " ga-ignore-*"

env:
    MIRROR_URL: git@github.com:EpitechPromo2028/B-DOP-200-LYN-2-1-chocolatine-marin.lagie.git
    EXECUTABLES: "tester"
    ALLOW_FUNC: "write"

jobs:
    check_coding_style:
        runs-on: ubuntu-latest
        container: ghcr.io/epitech/coding-style-checker:latest
        steps:
            - name: Checkout GH repository
              uses: actions/checkout@v4
              with:
                  repository: ''
            - name: Run coding-style
              run: check.sh $(pwd) $(pwd)
            - name: Check coding-style errors
              run: |
                  input=$(pwd)/coding-style-reports.log
                  awk -F':' '{print "::error title="$3" coding style error,file="$1",line="$2"::"$4}' $input
                  if [ -s $input ]; then
                      exit 1
                  fi
    check_program_compilation:
        runs-on: ubuntu-latest
        timeout-minutes: 2
        container: epitechcontent/epitest-docker:latest
        needs:
            - check_coding_style
        steps:
            - name: Checkout GH repo
              uses: actions/checkout@v4
              with:
                  repository: ''
            - name: Compile project
              run: make
            - name: Clean project
              run: make clean
            - name: Check file
              run: |
                  for file in ${{ env.EXECUTABLES }};do
                      if [ ! -x "$file" ]; then
                          echo "File $file does not exist or is not executable"
                          exit 1
                      fi
                  done

    run_tests:
        runs-on: ubuntu-latest
        timeout-minutes: 2
        container: epitechcontent/epitest-docker:latest
        needs:  check_program_compilation
        steps:
            - name: Checkout GH repo
              uses: actions/checkout@v4
              with:
                  repository: ''
            - name: Compile tests binaries
              run: make tests_run

    push_to_mirror:
        runs-on: ubuntu-latest
        needs:  run_tests
        if: github.event_name == 'push'
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - uses: pixta-dev/repository-mirroring-action@v1.1.1
              with:
                  target_repo_url:
                      ${{ env.MIRROR_URL }}
                  ssh_private_key:
                      ${{ secrets.GIT_SSH_PRIVATE_KEY }}